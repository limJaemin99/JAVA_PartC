day21



---------------------------------------------------------------------------------------------

# txt파일을 불러오기

1.읽어올 파일에 대한 객체를 생성한다. (File 클래스 이용)
   ex)  String path = "D:\\iclass0419\\words.txt";
	File file = new File(path)

2. file을 다루는 Scanner 객체를 생성한다
   ex)	Scanner fsc = new Scanner(file);

3.try - catch 나 throws - catch 로 예외처리를 한다.



# txt파일을 만들기

1.저장할 파일의 경로와 이름을 지정하고 객체를 생성한다.
   ex)	String path = "D:\\iclass0419\\note.txt";
	File file = new File(path);

2. 입력 메소드를 사용하기 위해 PrintWriter 클래스의 객체를 생성한다.
   ex)	PrintWriter fpw = new PrintWriter(file);
	입력 : 객체명.print() 형식

3. try - catch 나 throws - catch 로 예외처리를 한다.

---------------------------------------------------------------------------------------------

[List , Set , Map 의 특성 및 사용 시점]
1. List
	● 순서가 있는 데이터의 집합을 관리할 때 사용한다.
	● 데이터의 중복을 허용한다.
	● List는 인덱스를 사용하여 원하는 위치의 요소에 접근할 수 있고, 순차적인 데이터 처리에 적합하다.
	ex) 학생 목록, 작업 목록 등을 저장하고 관리할 때 List를 사용할 수 있다.

2. Set
	● 순서가 없는 고유한 데이터의 집합을 관리할 때 사용한다.
	● 데이터의 중복을 허용하지 않는다.
	● Set은 중복된 값을 허용하지 않으므로 중복 제거에 유용하다.
	ex) 회원 목록에서 중복된 이메일 주소를 제거하고 유일한 이메일 주소만 유지하려는 경우 Set을 사용할 수 있다.

3. Map
	● Key-Value 쌍으로 이루어진 데이터의 집합을 관리할 때 사용한다.
	● 각 요소는 고유한 키(Key)와 해당 키에 대응하는 값(Value)으로 구성된다.
	● Map은 Key를 기준으로 값을 저장하고 검색하는데 사용된다.
	ex) 학생의 학번을 Key로 하고 학생의 정보를 값으로 저장하여 학생의 정보를 빠르게 검색하고자 할 때 Map을 사용할 수 있다.

[결론]
- List는 데이터의 순서를 유지하고 중복을 허용하는 경우에 사용
- Set은 중복을 제거하고 고유한 데이터를 관리하는 경우에 사용
- Map은 Key-Value 쌍으로 데이터를 저장하고 검색하는 경우에 사용

---------------------------------------------------------------------------------------------

[Map 설명]
Map 은 자바에서 키(Key)와 값(Value)의 쌍으로 데이터를 저장하는 자료구조이다.
각각의 키는 중복되지 않으며, 값은 중복될 수 있다.
Map은 키를 통해 값을 검색하고, 키와 값의 매핑 관계를 유지한다.

1. put(key, value) : 주어진 키와 값의 쌍을 맵에 추가한다.
2. get(key) : 주어진 키에 해당하는 값을 반환한다.
3. containsKey(key) : 주어진 키가 맵에 존재하는지 확인한다.
4. containsValue(value) : 주어진 값이 맵에 존재하는지 확인한다.
5. remove(key) : 주어진 키에 해당하는 항목을 맵에서 제거한다.
6. size() : 맵에 저장된 키-값 쌍의 개수를 반환한다.
7. keySet() : 맵의 모든 키를 Set 형태로 반환한다.
8. values() : 맵의 모든 값들을 Collection 형태로 반환한다.	(출력 예시 ▶ 1, 2, 3 ...)
9. entrySet() : 맵의 모든 키-값 쌍을 Set 형태로 반환한다.	(출력 예시 ▶ A: 1, B: 2 ...)

Map 인터페이스를 구현한 주요 클래스로는 HashMap, TreeMap, LinkedHashMap 등이 있다.
각각의 클래스는 내부적으로 데이터를 저장하고 검색하기 위한 다른 방식을 사용하며, 동작 및 특징도 약간씩 다를 수 있다.

Map은 자주 사용되는 자료구조 중 하나로, 키를 통해 빠르게 값을 찾을 수 있어 유용하다.
예를 들어, 학생의 학번을 키로 하고 성적을 값으로 맵에 저장하면, 학번을 이용하여 빠르게 성적을 조회할 수 있다.

---------------------------------------------------------------------------------------------

[Map 언제 사용하는지?]

1. 데이터 검색 : Map은 키를 기반으로 값을 검색하는 데 유용하다.
	ex) 학생의 학번을 키로 하고 성적을 값으로 맵에 저장하면, 학번을 입력받아 해당 학생의 성적을 빠르게 조회할 수 있다.

2. 데이터 그룹화 : Map을 사용하여 데이터를 그룹화할 수 있다.
	ex) 도시를 키로 하고 해당 도시의 인구를 값으로 맵에 저장하면, 각 도시의 인구를 쉽게 파악할 수 있다.

3. 캐싱 : Map은 캐싱에도 활용될 수 있다.
		맵에 데이터를 저장하여 자주 사용되는 데이터에 빠르게 접근할 수 있다.
		이를 통해 데이터 접근 속도를 향상시킬 수 있다.

4. 매핑 및 변환 : Map을 사용하여 매핑 또는 변환 작업을 수행할 수 있다.
	ex) 문자열에 대한 치환 작업을 수행하고자 할 때, 특정 문자열을 키로 하고 대체할 문자열을 값으로 맵에 저장하여 매핑 작업을 간편하게 수행할 수 있다.

5. 집계 및 통계 : Map을 사용하여 데이터를 집계하고 통계 정보를 생성할 수 있다.
	ex) 주문 상품의 종류를 키로 하고 해당 상품의 주문 수량을 값으로 맵에 저장하여 각 상품의 판매량을 집계하고 분석할 수 있다.

이 외에도 Map은 데이터 조작, 그래프 알고리즘, 문서 처리 등 다양한 분야에서 활용될 수 있다.
사용하는 상황과 요구사항에 따라 Map을 적절히 활용하여 데이터를 구조화하고 처리할 수 있다.


