시나리오 : 반려동물 분양 커뮤니티

--실행화면--
[[반려동물 목록을 보여드리겠습니다.]]
// Animal 클래스(추상클래스)를 배열 사용하여 구현합니다.


브라운 강아지는 멍멍하고 짖습니다.😽 		// Puppy 클래스 sound() 메소드
그레이 고양이는 야옹하고 소리를 냅니다.		// Cat 클래스 sound() 메소드
흰색 토끼는 조용합니다.			// Rabbit 클래스 sound() 메소드

//Member 클래스를 생성합니다.  //회원의 분양 자격을 체크합니다.
//    ㄴ adopt 메소드 인자 Animal 타입을 받습니다.
모모 회원님은 강아지 분양 자격이 안됩니다. 😓   또는
모모 회원님 강아지 분양 가능합니다. 😃 



--소스 코드 분석하기--

# AnimalCommunity
이 코드는 부모클래스인 Animal 클래스 타입의 자식(Puppy, Car, Rabbit) 객체를 생성하여
각 자식 클래스에서 Override 한 sound() 메소드를 출력하였고,
Member 클래스 타입의 객체(모모, 사나, 미나)3개를 생성하여
각 객체가 원하는 동물을 instanceOf를 통해 찾은 후
나이 조건에 맞으면 true, 틀리면 false를 반환하여 print메소드를 통해 분양이 가능한지 여부를 출력한다.



# AnimalCommunity2
위와 같은 구현 방법이지만 이름, 나이, 동물을 선택하는 방식이다.



# Animal (추상, 부모)
[필드]
- Animal 클래스를 상속받는 자식들의 공통 특성인 color, name 을 가지고 있다.

[생성자]
- 기본생성자에 print를 사용했으므로 이 클래스가 실행될 때(클래스 실행시점, 자식클래스 실행시점)마다 출력문이 출력된다.
- 커스텀 생성자에 color을 매개변수로 갖고있고, 기본생성자 메소드를 호출하였으므로
	이 클래스가 실행될 때 출력문이 출력되고, color에 매개변수로 입력한 color의 값이 들어간다.

[추상 메소드]
자식 클래스에서 사용할 공통적인 메소드들을 정리한 부분
- sound()
- getType()

[일반 인스턴스 메소드]
필드가 private이므로 getter, setter를 만들어줘야 Animal타입 객체에서 사용 가능하다.
- getColor()
- setColor()



# Puppy, Cat, Rabbit (자식)
[필드]
static final을 사용한 TYPE을 생성했다.
static final로 선언했으므로 TYPE은 불변객체다.

[생성자]
커스텀 생성자에 color을 매개변수로 사용하였고,
super(color)을 사용해 부모클래스의 필드인 color을 부모클래스에서 초기화시켜줬다.

[일반 인스턴스 메소드]
TYPE의 출력을 위해 getType 메소드를 생성했다.

[추상 메소드]
부모에서 생성한 sound() 메소드를 Override하여 자식만의 sound() 메소드를 생성했다.



# Member
Member 클래스는 Animal 클래스와 연관이 없는 클래스이다.
[필드]
- private로 생성했다.

[생성자]
- 기본 생성자는 없고 name, age를 매개변수로 갖는 커스텀 생성자만 있다.

[인스턴스 메소드]
- isAdopt 메소드의 실행 순서는 다음과 같다.
	1. 매개변수로 키울 동물의 이름을 입력한다.
	2. 입력받은 동물을 instanceOf를 통해 어떤 동물인지 구별하고,
		나이 조건에 만족하면 true를, 아니면 false를 반환한다.

- getName()을 통해 name 필드를 출력한다.


